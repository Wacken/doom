* Setup
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Wacken Desktop Arch"
      user-mail-address "sebastianwalchi@gmail.com")

(setq byte-compile-warnings '(cl-functions)) ; ignore Package cl is depcrecated warning
(set-time-zone-rule "Asia/Tokyo")


(load! "local-packages/functions")
(load! "local-packages/secret_file")
#+end_src

* keybindings
** general
#+begin_src  emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src
*** doom
#+begin_src emacs-lisp
(map!
 :leader
 :desc "M-x" "SPC" 'execute-extended-command

 "wa"              'ace-window
 "ws"              'ace-swap-window
 "wc"              'ace-delete-window

 :desc "toogle test and implementation" "ps" 'projectile-toggle-between-implementation-and-test
 "pS"              'projectile-save-project-buffers

 "a"               'org-agenda
 "A"               'org-switchb
 "T"               'org-capture)
#+end_src

** evil
*** setup
 #+begin_src emacs-lisp
(setq evil-emacs-state-modes nil)
(setq evil-motion-state-modes nil)
 #+end_src

** which-key
 #+begin_src emacs-lisp
(use-package! which-key
  :config
  (setq which-key-idle-delay 1
        which-key-show-operator-state-maps t))
 #+end_src

* navigation
** ibuffer
#+begin_src emacs-lisp
(setq! ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (name . "\*mu4e\*"))
               ("elfeed" (name . "\*elfeed\*"))
               ("programming" (or
                               (mode . python-mode)
                               (mode . c++-mode)
                               (mode . clojure-mode)
                               (mode . csharp-mode)
                               (mode . haskell-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*messages\\*$")
                         (name . "^\\*dashboard\\*$")))))))

(add-hook! 'ibuffer-mode-hook (ibuffer-auto-mode) (ibuffer-switch-to-saved-filter-groups "default"))
#+end_src

** ace window
#+begin_src emacs-lisp
(use-package! ace-window
  :config
  (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
  (custom-set-faces!
     '(aw-leading-char-face
       :inherit ace-jump-face-foreground :height 3.0
       :foreground "red")))
#+end_src
** dired
#+begin_src emacs-lisp
(use-package! dired
  :custom ((dired-listing-switches "-aho --group-directories-first"))
  :config
  (setq delete-by-moving-to-trash t)
 (evil-collection-define-key 'normal 'dired-mode-map
   "h" 'dired-up-directory
   "l" 'dired-find-file))

(use-package! dired-open
  :config
  (setq dired-open-extensions '(("png" . "sxiv")("jpg" . "sxiv")("jpeg" . "sxiv")
                                ("mp4" . "vlc"))))
#+end_src

* texteditor
** lines
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** cursor
#+begin_src emacs-lisp
(setq evil-normal-state-cursor  '(box       "#c792ea")
      evil-insert-state-cursor  '((bar . 2) "#c792ea")
      evil-visual-state-cursor  '(box       "#E9F13B")
      evil-emacs-state-cursor   '((bar . 4) "#6785c6")
      evil-replace-state-cursor '(hbar      "#FFB035"))
#+end_src

** Color
#+BEGIN_SRC emacs-lisp
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+END_SRC
* languages
** tools
*** company statistics
#+begin_src emacs-lisp
(use-package! company-statistics
  :ghook 'company-mode-hook)
#+end_src
*** lsp
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(use-package! lsp-sonarlint)
(setq lsp-use-plists t) ;; optimization for lsp
#+end_src
** c#
*** repl
need to integrate in doom eval/REPL
#+begin_src emacs-lisp
(set-repl-handler! 'csharp-mode #'my-csharp-repl)
#+end_src
** clojure
*** hydra
#+begin_src emacs-lisp
(use-package! cider-hydra
  :ghook 'clojure-mode-hook)
#+end_src
** python
#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy))
#+end_src
*** sonar-lsp
#+begin_src emacs-lisp
(use-package! lsp-sonarlint-python
  :config
  (setq lsp-sonarlint-python-enabled t))
#+end_src
** cc
*** lsp
#+begin_src emacs-lisp
(after! ccls
  (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
  (set-lsp-priority! 'ccls 2)) ; optional as ccls is the default in Doom
#+end_src

*** cmake
#+begin_src emacs-lisp
(use-package! cmake-ide
  :init
  (cmake-ide-setup))

;; Associate CMakeLists.txt files with cmake-mode
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
#+end_src
** bash
#+begin_src emacs-lisp
(setq sh-shell-file "/bin/bash") ;; make default for shell files be bash (lsp not available for zsh)
#+end_src

** latex
#+begin_src emacs-lisp
(add-hook! 'latex-mode-hook (lambda () latex-preview-pane-mode))
(setq TeX-engine 'luatex)
(setq pdf-latex-command "lualatex")
(setq org-latex-pdf-process '("LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

* org
** setup
#+begin_src emacs-lisp
(defconst org-dir "~/Files/Org/")
(defconst org-agenda-dir (concat org-dir "Agenda/"))
(setq org-directory org-dir)
(setq org-roam-directory org-directory)
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode) t)
(add-hook! 'org-mode-hook 'turn-on-auto-fill)
(after! org
  (setq org-startup-folded 'content
        org-startup-indented 'indent
        org-agenda-files (list (concat org-dir "Agenda"))
        org-log-done 'time
        org-log-into-drawer t
        org-extend-today-until 4
        org-ellipsis " ⌄"
        org-agenda-start-with-log-mode t
        org-use-property-inheritance t
        org-deadline-warning-days 7
        org-hide-emphasis-markers t
        org-id-link-to-org-use-id t))
#+end_src
** bullets
#+begin_src emacs-lisp
(use-package! org-superstar
  :init
  (setq org-superstar-headline-bullets-list
        '("▶" "✚" "●" "◆" "◇")))
#+end_src

** todo-Settings
#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "PROJECT(p)" "NEXT(n)" "CURRENT(c)" "WAITING(w@/!)" "|" "DONE(d)")
              (sequence "HOLD(h@/!)" "|" "DELEGATED(m@/!)" "CANCELLED(C@/!)" "PHONE" "MEETING"))))
(with-no-warnings
  (custom-declare-face '+org-todo-active  '((t (:inherit (bold font-lock-constant-face org-todo)))) "")
  (custom-declare-face '+org-todo-project '((t (:inherit (bold font-lock-doc-face org-todo)))) "")
  (custom-declare-face '+org-todo-onhold  '((t (:inherit (bold warning org-todo)))) ""))
(setq org-todo-keyword-faces
      (quote (("NEXT" . +org-todo-active)
              ("CURRENT" . +org-todo-active)
              ("PROJECT" . +org-todo-project)
              ("HOLD" . +org-todo-onhold)
              ("WAITING" . +org-todo-onhold))))
#+end_src

** super-agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-custom-commands
        '(("g" "Goals"
           ((alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Future Goals"
                             :and (:todo "PROJECT" :tag "Goal" :tag "Future" :tag "Active")
                             :order 1
                             :transformer (--> it
                                               (car (split-string it ":"))
                                               (propertize it 'face '(:foreground "Cyan"))))
                            (:name "Long_term Goals"
                             :and (:todo "PROJECT" :tag "Goal" :tag "Long_term" :tag "Active")
                             :order 3
                             :transformer (--> it
                                               (car (split-string it ":"))
                                               (propertize it 'face '(:foreground "Green"))))
                            (:name "Short_term Goals"
                             :and (:todo "PROJECT" :tag "Goal" :tag "Short_term" :tag "Active")
                             :order 5
                             :transformer (--> it
                                               (car (split-string it ":"))
                                               (propertize it 'face '(:foreground "orange"))))

                            (:name "Archive Goals"
                             :and (:todo "PROJECT" :tag "Goal")
                             :order 9
                             :transformer (--> it
                                               (car (split-string it ":"))))
                            (:discard (:anything))))))))
          ("G" "GTD Block View"
           ((agenda "" ((org-agenda-span 2)
                        (org-agenda-start-day nil)
                        (org-super-agenda-groups
                         '((:name "This day"
                            :time-grid t
                            :date today
                            :scheduled today
                            :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Future Goals"
                             :and (:todo "PROJECT" :tag "Goal" :tag "Future" :tag "Active")
                             :order 3
                             :transformer (--> it
                                               (car (split-string it ":"))
                                               (propertize it 'face '(:foreground "Cyan"))))
                            (:name "Long_term Goals"
                             :and (:todo "PROJECT" :tag "Goal" :tag "Long_term" :tag "Active")
                             :order 4
                             :transformer (--> it
                                               (car (split-string it ":"))
                                               (propertize it 'face '(:foreground "Green"))))
                            (:name "Short_term Goals"
                             :and (:todo "PROJECT" :tag "Goal" :tag "Short_term" :tag "Active")
                             :order 5
                             :transformer (--> it
                                               (car (split-string it ":"))
                                               (propertize it 'face '(:foreground "orange"))))
                            ;; (:name "Computer"
                            ;;  :and (:todo "NEXT" :tag "@computer")
                            ;;  :order 1)
                            ;; (:name "Home"
                            ;;  :and (:todo "NEXT" :tag "@home")
                            ;;  :order 2)
                            ;; (:name "Smartphone"
                            ;;  :and (:todo "NEXT" :tag "@smartphone")
                            ;;  :order 3)
                            ;; (:name "errand"
                            ;;  :and (:todo "NEXT" :tag "@errand")
                            ;;  :order 4)
                            (:name "Current"
                             :and (:todo "CURRENT" :tag "Active")
                             :order 20)
                            (:name "Next"
                             :and (:todo "NEXT" :tag "Active")
                             :order 25)
                            (:name "Work"
                             :and (:todo "NEXT" :tag "@work")
                             :order 30)
                            (:name "Hold"
                             :and (:todo "HOLD" :tag "Project" :tag "Active" :not (:tag "@work"))
                             :order 45)
                            (:name "Waiting"
                             :and (:todo "WAITING" :tag "Project" :tag "Active" :not (:tag "@work"))
                             :order 50)
                            (:discard (:anything))))))))
          ("P" "Projects"
           ((alltodo "" ((org-super-agenda-groups
                          '((:name "Projects Current"
                             :and (:todo "CURRENT" :tag "Project" :tag "Active")
                             :order 0)
                            (:name "Projects Next"
                             :and (:todo "NEXT" :tag "Project" :tag "Active")
                             :order 1)
                            (:name "Projects Stuck"
                             :and (:todo "PROJECT" :not (:children ("NEXT" "CURRENT" "WAITING" "HOLD")) :tag "Project" :tag "Active")
                             :order 3)
                            (:name "Projects Waiting"
                             :and (:todo "PROJECT" :children ("WAITING" "HOLD") :not (:children ( "NEXT" "CURRENT" )) :tag "Project" :tag "Active")
                             :order 4)
                            (:discard (:anything))))))
            (alltodo "" ((org-super-agenda-groups
                          '((:name "Projects Active"
                             :and (:todo "PROJECT" :tag "Project" :tag "Active")
                             :order 5)
                            (:name "Projects Archived"
                             :and (:todo "PROJECT" :tag "Project" :tag "Archive" :not (:tag ("Completed" "Cancelled")))
                             :order 10)
                            (:name "Projects Completed"
                             :and (:todo "PROJECT" :tag "Project" :tag "Archive" :tag "Completed")
                             :order 15)
                            ;; (:name "Projects To Cleanup"
                            ;;  :todo "PROJECT"
                            ;;  :order 15)
                            ;; (:name "Rest To Cleanup"
                            ;;  :children t
                            ;;  :order 20)
                            (:discard (:anything))))))))
          ("L" "Last week"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-start-day "-7d")
                        (org-super-agenda-groups
                         '((:time-grid t
                            :date today
                            :scheduled today
                            :order 1)))))))
          ("N" "Last week"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-start-day nil)
                        (org-super-agenda-groups
                         '((:time-grid t
                            :date today
                            :scheduled today
                            :order 1)))))))))

  (setq org-agenda-todo-ignore-scheduled 'future
        org-agenda-tags-todo-honor-ignore-options t
        org-agenda-fontify-priorities t)
  (setq org-super-agenda-header-map (make-sparse-keymap))
  :config
  (org-super-agenda-mode))
#+end_src

** tags
#+begin_src emacs-lisp
(after! org
  (setq org-tags-column -80)
  (setq org-tag-alist
        '((:startgroup)
                                        ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?e)
          ("@home" . ?h)
          ("@work" . ?w)
          ("@computer" . ?c)
          ("@smartphone" . ?s)
          ("game" . ?g)
          ("ignore" . ?i))))
#+end_src

** appt
#+begin_src emacs-lisp
(add-hook! 'org-agenda-finalize-hook 'bh/org-agenda-to-appt 'append) ; Rebuild the reminders everytime the agenda is displayed
(appt-activate t) ; Activate appointments so we get notifications
(run-at-time "24:01" nil 'bh/org-agenda-to-appt) ; If we leave Emacs running overnight - reset the appointments one minute after midnight
(setq appt-message-warning-time 15
      appt-display-interval 1
      ;; ring-bell-function (lambda () (play-sound-file "~/.config/doom/local-packages/364658__original-sound__notification.wav"))
      ;; visible-bell nil
      appt-audible (cons 3 .5))
#+end_src

** refiling
#+begin_src emacs-lisp
(after! org
  (setq org-refile-targets
        `((,(concat org-agenda-dir "todo.org") :maxlevel . 3)
          (,(concat org-agenda-dir "someday.org") :level . 1)
          (,(concat org-agenda-dir "gcal.org") :maxlevel . 2)))
  (setq org-archive-location (concat org-directory "archive.org_archive::* Archived Tasks"))
  (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

** deft
#+begin_src emacs-lisp
(setq deft-directory org-dir
      deft-extensions '("org")
      deft-recursive t)
#+end_src

** COMMENT journal
#+begin_src emacs-lisp
(setq org-journal-date-prefix "#+TITLE: "
      org-journal-time-prefix "* "
      org-journal-date-format "%a, %d-%m-%Y"
      org-journal-file-format "%Y-%m-%d.org"
      org-journal-dir org-directory)
#+end_src

** capture
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("t" "Todo [inbox]" entry
         (file ,(concat org-agenda-dir "inbox.org"))
         "* TODO %^{Title|ToOrder}\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%a\n%i\n%?" :empty-lines 1)
        ("T" "Todo No Reference [inbox]" entry
         (file ,(concat org-agenda-dir "inbox.org"))
         "* TODO %^{Title|ToOrder}\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%i\n%?" :empty-lines 1)
        ("a" "Appointment" entry
         (file+headline ,(concat org-agenda-dir "appointments.org") "Appointment")
         "* %?\n%^T\n:PROPERTIES:\n:CREATED: %U\n:END:\n" :empty-lines 1)
        ("d" "Deadline" entry
         (file ,(concat org-agenda-dir "inbox.org"))
         "* TODO %?\nDEADLINE: %^T\n:PROPERTIES:\n:CREATED: %U\n:END:\n" :empty-lines 1)
        ("L" "Link" entry
         (file ,(concat org-agenda-dir "inbox.org"))
         "* TODO %^{Title|ToOrder}\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%x\n%i\n%?")
        ("c" "org-protocol-capture" entry
         (file ,(concat org-agenda-dir "inbox.org"))
         "* TODO [[%:link][%:description]]\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%i" :immediate-finish t)
        ("J" "Journal entry" plain
         (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)\n%i\n%?")))
#+end_src

** noter
#+begin_src emacs-lisp
(setq org-noter-always-create-frame nil)
(setq org-noter-notes-search-path (list org-directory))
#+end_src

** org-habit
#+begin_src emacs-lisp
(use-package! org-agenda
  :config
  (setq org-habit-show-habits-only-for-today t))
(add-to-list 'org-modules 'org-habit)
;; (load! "local-packages/org-habit-plus")
;; (add-to-list 'org-modules 'org-habit-plus)
#+end_src
** org-protocol
#+begin_src emacs-lisp
;; (require 'org-protocol)
#+end_src
** org-roam
:PROPERTIES:
:ID:       a3610c87-3d74-4d54-9631-760748d3486e
:END:
#+begin_src emacs-lisp
(after! org
  (setq +org-roam-open-buffer-on-find-file nil
        org-roam-prefer-id-links t))
(setq org-roam-capture-templates
      '(("d" "default" plain
         "%i\n%?"
         :if-new (file+head "${slug}-%<%Y%m%d%H%M%S>.org" "#+TITLE: ${title}\n#+CREATED: %U\n")
         :unnarrowed t)
        ("r" "reference" plain
         "* Metadata\n- topic :: \n- source :: %x\n- author :: \n\n%?"
         :if-new (file+head "${slug}-%<%Y%m%d%H%M%S>.org" "#+TITLE: ${title}\n#+CREATED: %U\n#+FILETAGS: :Reference:%^{Type|Article|Lecture|Video|Book}:%^{Status|Read|Reading|WantToRead|Completed}:\n\n")
         :unnarrowed t)
        ("p" "project" plain
         "* Metadata\n- keys :: \n- goals :: \n\n* PROJECT Tasks\n** TODO %?"
         :if-new (file+head "${slug}-%<%Y%m%d%H%M%S>.org" "#+TITLE: ${title}\n#+CREATED: %U\n#+FILETAGS: :Project:%^{Status|Archive|Active}:\n\n")
         :unnarrowed t)
        ("g" "goal" plain
         "* Metadata\n- area :: [[id:f903c964-ffe7-4c56-bea8-0d886ec89c00][My Personal Goals]],\n- goals :: %?\n\n* PROJECT Sub-Goals\n- [ ] \n\n* TODO Next Assessment\nSCHEDULED: %^t\n\n* TODO Completion\nDEADLINE: %^t\n\n* Assessment Log\n[[id:9978d6be-9bb0-4cb1-8a6c-38833b1ead11][Templates for assessments]]\n"
         :if-new (file+head "${slug}-%<%Y%m%d%H%M%S>.org" "#+TITLE: ${title}\n#+CREATED: %U\n#+FILETAGS: :Goal:%^{Status|Short_Term|Long_Term|Future}:%^{Status|Archive|Active}:\n\n")
         :unnarrowed t)))
#+end_src

*** COMMENT org-roam server
#+begin_src emacs-lisp
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src
*** COMMENT org-roam-company
#+begin_src emacs-lisp
(use-package! company-org-roam
  :config
  (push 'company-org-roam company-backends))
#+end_src
*** COMMENT nroam
#+begin_src emacs-lisp
;; (use-package! nroam
;;   :after org-roam
;;   :config
;;   (add-hook! 'org-mode-hook #'nroam-setup-maybe))
#+end_src
*** org-roam-ui
#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :ghook 'after-init
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** pandoc-import
#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src
** block template
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("S" . "src emacs-lisp"))
#+end_src
** org-gmail-calendar
#+begin_src emacs-lisp
(setq org-gcal-client-id "450681703770-iteaad3onrsjkjad401bkqg9bu0ennrj.apps.googleusercontent.com"
      org-gcal-client-secret gmail-secret
      org-gcal-fetch-file-alist '(("sebastianwalchi@gmail.com" .  "~/Files/Org/Agenda/appointments.org")))
                                  ;; ("another-mail@gmail.com" .  "~/task.org")

(setq plstore-cache-passphrase-for-symmetric-encryption t)
(require 'org-gcal)
#+end_src

* tools
** tramp
#+begin_src emacs-lisp
(use-package! tramp
  :config
  (add-to-list 'tramp-default-user-alist
               '("ssh" nil "root")))
#+end_src
** magit
#+begin_src emacs-lisp
(map! :map magit-mode-map
      :nv "g r" 'magit-refresh)
#+end_src

** COMMENT vterm
#+begin_src emacs-lisp
(use-package! vterm
  :config
  (add-hook! 'vterm-mode-hook (lambda () (company-mode -1))))
#+end_src
** mu4e
#+begin_src emacs-lisp
(setq! browse-url-browser-function 'browse-url-generic
       browse-url-generic-program "brave")
(after! mu4e
  (add-to-list 'mu4e-headers-actions
   '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (setq! mu4e-maildir (expand-file-name "~/.local/share/mail/outlook") ; the rest of the mu4e folders are RELATIVE to this one
         mu4e-get-mail-command "mbsync -aVX -c ~/.config/mbsyncrc main"
         mu4e-index-update-in-background t
         mu4e-compose-signature-auto-include t
         mu4e-hide-index_messages t
         mu4e-use-fancy-chars t
         mu4e-view-show-addresses t
         mu4e-view-show-images t
         mu4e-compose-format-flowed t
         ;mu4e-compose-in-new-frame t
         mu4e-change-filenames-when-moving t ;; http://pragmaticemacs.com/emacs/fixing-duplicate-uid-errors-when-using-mbsync-and-mu4e/
         mu4e-headers-date-format "%d.%m.%y"
         mu4e-maildir-shortcuts
         '( ("/INBOX" . ?i)
            ("/Archives/2023" . ?a)
            ("/TODO" . ?t)
            ("/Work" . ?w)
            ("/Deleted" . ?d)
            ("/Junk" . ?j)
            ("/Sent" . ?s))

         ;; Message Formatting and sending
         message-send-mail-function 'smtpmail-send-it
         ;; message-signature-file "~/Documents/dotfiles/Emacs/.doom.d/.mailsignature"
         message-citation-line-format "On %a %d %b %Y at %R, %f wrote:\n"
         message-citation-line-function 'message-insert-formatted-citation-line
         message-kill-buffer-on-exit t
         ;; mu4e-compose-signature  "\nWith friendly regards,\nSebastian Walchshaeusl"
         ;; message-signature       "\nWith friendly regards,\nSebastian Walchshaeusl"

         ;; mu4e-contexts
         ;; (list
         ;;  (make-mu4e-context
         ;;   :name "main"))


         ;; Org mu4e
         org-mu4e-convert-to-html t))


(set-email-account! "main"
                    '((user-mail-address      . "sebastianwalchi@outlook.de")
                      (user-full-name         . "Sebastian Walchshaeusl")
                      (smtpmail-smtp-user     . "sebastianwalchi@outlook.de")
                      (smtpmail-smtp-server   . "smtp.office365.com")
                      (smtpmail-smtp-service  . 587)
                      (smtpmail-stream-type   . starttls)
                      (smtpmail-debug-info    . t)
                      (mu4e-drafts-folder     . "/Drafts")
                      (mu4e-refile-folder     . "/Archives/2023")
                      (mu4e-sent-folder       . "/Sent")
                      (mu4e-trash-folder      . "/Deleted")
                      (mu4e-update-interval   . 300))
                      ;(mu4e-sent-messages-behavior . 'delete)

                    nil)

#+end_src
** chatgpt
#+begin_src emacs-lisp
(load! "local-packages/chatgpt")
#+end_src
* UI
** themes
#+begin_src emacs-lisp
(use-package! doom-themes
  :config
  ;; global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (custom-theme-set-faces! 'doom-dracula
    `(markdown-code-face :background ,(doom-darken 'bg 0.075))
    `(font-lock-variable-name-face :foreground ,(doom-lighten 'magenta 0.6)))
  (setq doom-theme 'doom-dracula))
#+end_src

** modeline
#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs "  ")))
#+end_src

** font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 16)
      doom-variable-pitch-font (font-spec :family "DejaVu Serif")
      doom-big-font (font-spec :family "Fira Code" :size 25))

(setq +ligatures-in-modes '(not special-mode comint-mode eshell-mode term-mode vterm-mode org-agenda-mode))
#+end_src

** COMMENT minibuffer
#+BEGIN_SRC emacs-lisp
(advice-add 'url-lazy-message :around #'suppress-messages)
#+END_SRC
* other
** elfeed
*** setup
#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@1-month-ago +unread"
        elfeed-db-directory (concat doom-private-dir "elfeed/db/")))
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src

*** goodies
#+begin_src emacs-lisp
(use-package! elfeed-goodies
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src
** yadm
#+begin_src emacs-lisp
 (add-to-list 'tramp-methods
                   '("yadm"
                     (tramp-login-program "yadm")
                     (tramp-login-args (("enter")))
                     (tramp-login-env (("SHELL") ("/bin/sh")))
                     (tramp-remote-shell "/bin/sh")
                     (tramp-remote-shell-args ("-c"))))
#+end_src
