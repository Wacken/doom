#+startup: overview
* Setup
#+begin_src emacs-lisp

;; (require 'exwm)
;; (require 'exwm-config)
;; (exwm-config-default)
;; Plac your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Wacken Desktop Arch"
      user-mail-address "sebastianwalchi@gmail.com")

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

(setq byte-compile-warnings '(cl-functions)) ; ignore Package cl is depcrecated warning
#+end_src

* !keybindings
** general
*** doom
#+begin_src emacs-lisp
(map!
 :leader
 :desc "M-x" "SPC" 'counsel-M-x

 "wa"              'ace-window
 "ws"              'ace-swap-window
 "wc"              'ace-delete-window

 :desc "toogle test and implementation" "ps" 'projectile-toggle-between-implementation-and-test
 "pS"              'projectile-save-project-buffers
 )
#+end_src

** evil
*** !setup
 #+begin_src emacs-lisp
     (setq evil-emacs-state-modes nil)
     ;; don't put into normal mode in repl (setq evil-insert-state-modes nil)
     (setq evil-motion-state-modes nil)
 #+end_src

** which-key
 #+begin_src emacs-lisp
(use-package! which-key
  :config
  (setq which-key-idle-delay 1
        which-key-show-operator-state-maps t))
 #+end_src

* +navigation
** +counsel
 #+begin_src emacs-lisp
(use-package! counsel
  :init
  (define-key!
    [remap describe-symbol] #'counsel-describe-symbol)
  :config
  (setq ivy-count-format "[%d/%d]")
  (setq enable-recursive-minibuffers t)
  (setq search-default-mode #'char-fold-to-regexp))
;; (global-set-key (kbd "c-c g") 'counsel-git)
;; (global-set-key (kbd "c-c j") 'counsel-git-grep)
;; (global-set-key (kbd "c-c k") 'counsel-ag)
;; (global-set-key (kbd "c-s-o") 'counsel-rhythmbox)
 #+end_src

** ibuffer
#+begin_src emacs-lisp
(setq! ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (name . "\*mu4e\*"))
               ("elfeed" (name . "\*elfeed\*"))
               ("programming" (or
                               (mode . python-mode)
                               (mode . c++-mode)
                               (mode . clojure-mode)
                               (mode . csharp-mode)
                               (mode . haskell-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*messages\\*$")
                         (name . "^\\*dashboard\\*$")))))))

(add-hook! 'ibuffer-mode-hook (ibuffer-auto-mode) (ibuffer-switch-to-saved-filter-groups "default"))

;; ;; don't show these
;; ;;(add-to-list 'ibuffer-never-show-predicates "zowie")
;; ;; don't show filter groups if there are no buffers in that group

;; ;; don't ask for confirmation to delete marked buffers
;; (setq ibuffer-expert t)
#+end_src

** ace window
#+begin_src emacs-lisp
(use-package! ace-window
  :config
  (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))
  (custom-set-faces!
     '(aw-leading-char-face
       :inherit ace-jump-face-foreground :height 3.0
       :foreground "red")))
#+end_src

* texteditor
** lines
#+begin_src emacs-lisp
;; (global-hl-line-mode)
(setq display-line-numbers-type 'relative)
#+end_src

** cursor
#+begin_src emacs-lisp
(setq evil-normal-state-cursor  '(box       "#c792ea")
      evil-insert-state-cursor  '((bar . 2) "#c792ea")
      evil-visual-state-cursor  '(box       "#E9F13B")
      evil-emacs-state-cursor   '((bar . 4) "#6785c6")
      evil-replace-state-cursor '(hbar      "#FFB035"))
#+end_src

** Color
#+BEGIN_SRC emacs-lisp
;; (add-hook! 'org-mode-hook (rainbow-mode))
;; (add-hook! 'prog-mode-hook (rainbow-mode))
;; (add-hook! 'text-mode-hook (rainbow-mode))
(add-hook! 'rainbow-mode-hook
  (hl-line-mode (if rainbow-mode -1 +1)))
#+END_SRC

** -beacon
#+begin_src emacs-lisp
  ;; (use-package beacon
  ;;   :diminish beacon-mode
  ;;   :config
  ;;   (beacon-mode))
#+end_src

* +code-transform
** +expand-region
#+begin_src emacs-lisp
;; (use-package expand-region
;;   :ensure t
;;   :general
;;   (:states '(visual motion)
;;    "c-+" 'er/expand-region
;;    "c--" 'er/contract-region))
#+end_src

** -hungry-delete
#+begin_src emacs-lisp
  ;; (use-package hungry-delete
  ;;   :ensure t
  ;;   :diminish hungry-delete-mode
  ;;   :ghook ('(python-mode-hook
  ;;             csharp-mode-hook
  ;;             c++-mode-hook
  ;;             haskell-mode-hook)))
#+end_src

** +++lispy
*** setup
#+begin_src emacs-lisp
;; (use-package! lispy
;;   :config
;;   (add-hook! 'activate-mark-hook #'lispyville--enter-visual)
;;   (setq lispy-compat t)
;;   ;; enter visual state after `lispy-mark-symbol' with correct selection
;;   (evil-define-key 'normal lispyville-mode-map
;;     "v" (lispyville-wrap-command lispy-mark-symbol visual))
;;   )
;; (setq-default mode-line-format
;;                '(:eval (when (featurep 'lispyville)
;;                          (lispyville-mode-line-string))))
;; (defun setup-custorm-doom-modeline
;;     (doom-modeline-set-modeline 'default))
;; (add-hook! 'doom-modeline-mode-hook #'lispyville-mode-line-string)
;; (setq! global-mode-string (lispyville-mode-line-string "insert" "special-lispy"))
#+end_src

*** others
evil-lispy
paredit
smartparens
evil-cleverparens
** +agressive-indent
#+begin_src emacs-lisp
;; (use-package aggressive-indent
;;   :ensure t
;;   :ghook ('(;; python-mode-hook
;;             csharp-mode-hook
;;             c++-mode-hook
;;             haskell-mode-hook)))
;; ;; (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+end_src

* +languages
** tools
*** company
**** statistics
#+begin_src emacs-lisp
(use-package! company-statistics
  :ghook 'company-mode-hook)
#+end_src

** c#
*** repl
need to integrate in doom eval/REPL
#+begin_src emacs-lisp
(defun my-csharp-repl ()
  "switch to the csharprepl buffer, creating it if necessary."
  (interactive)
  (if-let ((buf (get-buffer "*csharprepl*")))
      (pop-to-buffer buf)
    (when-let ((b (make-comint "csharprepl" "csharp")))
      (switch-to-buffer-other-window b))))
(set-repl-handler! 'csharp-mode #'my-csharp-repl)
#+end_src

** clojure
*** hydra
#+begin_src emacs-lisp
(use-package! cider-hydra
  :ghook 'clojure-mode-hook)
#+end_src

** +python
#+begin_src emacs-lisp
;; (use-package jedi
;;   :init
;;   (add-hook 'python-mode-hook 'jedi:setup)
;;   (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src

** org
*** setup
#+begin_src emacs-lisp
(custom-set-variables
 '(org-startup-folded 'overview)
 '(org-startup-indented t))
(defconst org-dir "~/Files/Org")
(setq org-directory org-dir)
;; somehow broken
;; (setq org-file-apps
;;       (append
;;        '(("\\.pdf\\'" . "zathura %s"))
;;        org-file-apps))
(setq org-agenda-files
      `(,(concat org-dir "/gcal.org")
        ,(concat org-dir "/i.org")))
(setq org-log-done 'time)
#+end_src

#+RESULTS:
: time

*** bullets
#+begin_src emacs-lisp
(use-package! org-bullets
  :init
  (setq org-bullets-bullet-list
        '("▶" "✚" "●" "◆" "◇"))
  :ghook 'org-mode-hook)
#+end_src

** +c++
#+begin_src emacs-lisp
;; (use-package ggtags
;;   :ensure t
;;   :config
;;   (add-hook 'c-mode-common-hook
;;             (lambda ()
;;               (when
;;                   (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;                 (ggtags-mode 1)))))

#+end_src

* ui
** themes
#+begin_src emacs-lisp
(use-package! doom-themes
  :config
  ;; global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (custom-theme-set-faces! 'doom-dracula
    `(markdown-code-face :background ,(doom-darken 'bg 0.075))
    `(font-lock-variable-name-face :foreground ,(doom-lighten 'magenta 0.6)))
  (setq doom-theme 'doom-dracula))
#+end_src

** modeline
#+begin_src emacs-lisp
;; (use-package! doom-modeline
;;   :config
;;   (setq doom-modeline-minor-modes t)
;;   (setq doom-modeline-buffer-encoding nil))
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs "  ")))
#+end_src

** font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 16)
      doom-variable-pitch-font (font-spec :family "FreeSans")
      doom-big-font (font-spec :family "Fira Code" :size 25))
;; (use-package! fira-code-mode
;;   :ghook 'prog-mode-hook)
#+end_src

* other
** elfeed
*** setup
#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@1-month-ago +unread"))
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src

*** goodies
#+begin_src emacs-lisp
(use-package! elfeed-goodies
  :config
  (elfeed-goodies/setup))
#+end_src
